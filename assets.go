// Code generated by go-bindata.
// sources:
// assets/errors.csv
// DO NOT EDIT!

package resterrors

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsErrorsCsv = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcd\x6e\xdb\x30\x10\x84\xef\x79\x8a\xbd\xa5\x05\x04\x9b\xfe\xbb\xf4\x66\x04\xbd\xb6\x05\xda\x5e\x7a\xa3\xc9\x49\x48\x44\xe2\xaa\xcb\xa5\x1c\xe5\xe9\x0b\x4a\x89\x91\x04\x05\xac\xa3\xcd\xe1\x7c\xb3\x43\x52\x07\x63\x8c\x69\x0e\xc6\x34\x41\xb5\xff\xb2\x5e\xe3\xc9\x76\x7d\x8b\x95\xe3\x6e\x7d\x8e\x8f\x71\x0d\x11\x96\xbc\x9e\x85\xc7\x44\x25\x79\x28\xa4\x8b\x09\x9e\xa6\x45\x0a\xb6\xef\x51\x7f\x72\x22\x0d\xa0\x9f\x90\x01\xb2\xba\x39\x98\x9d\xd9\x34\x07\xb3\xbb\x6e\x5e\x85\x77\x5c\x5a\x4f\x89\x95\x1c\xa7\x04\xa7\xa4\x4c\x7f\x98\x1f\x81\x1e\x42\x56\xe9\x21\x0e\x48\x64\xbd\x17\xe4\xbc\xa2\xbb\x00\xf7\x48\x1a\xac\xd2\xf3\x45\x16\x33\x49\x49\x29\xa6\x07\xb2\xc9\x93\x75\x0e\x39\xc7\x53\x0b\x3a\x8d\x53\x3a\x41\x56\xca\x2f\x11\xf7\xc6\x98\x4d\xb3\xbf\x3e\xff\x2c\xfc\x35\xed\xff\x5b\xaa\x85\x67\xe4\x74\x5b\xc3\x8a\x20\xf7\x9c\x7c\xcd\x5b\x09\x59\xa5\x38\x2d\x02\x4a\x80\xc7\xf4\x7f\xe6\x76\x00\x8d\x5c\xe4\xd5\x60\x45\x3f\x5a\xd8\x5c\x0d\x87\x88\xf3\xb4\xf3\xc4\x7e\x24\xbe\x7f\xaf\x9b\x42\x6e\x97\x86\xdc\x36\x47\x1a\x6c\x5b\x50\x9b\xe8\x62\xce\xb5\x89\x7b\xe1\xee\x9d\x29\xb1\xbc\xac\xf7\xad\x75\xf0\x33\x64\xb7\x14\xb2\x6b\xbe\x27\x5c\x82\xf6\x56\x6c\x57\x2f\xc5\xa5\x93\x60\x07\x4c\x03\xe1\xa9\x87\x53\x78\xba\x67\xe9\xac\x4e\x47\xe2\x6c\xaa\x87\x7c\x42\xdd\x98\x5f\xd9\xfb\xa5\xec\x7d\x73\x37\x1b\x08\x3a\x1e\x40\xc2\xac\xd4\x5b\x0d\xf3\x94\x97\x9b\x30\xdb\x1e\x96\xda\x1e\x3e\xd8\x5a\x4a\xec\x41\xe7\xa8\x81\xf0\x14\xb3\xd6\x1e\x5d\x88\xad\xcf\xf4\xe9\x77\x06\xdd\x0a\x5c\x91\x1c\x07\xdc\x12\xf7\x1a\x39\x7d\xae\xc8\x8d\x31\xcd\xde\x6c\xae\x23\xab\xf0\xd8\xb6\x64\x8b\x06\x24\x8d\xce\x56\x0f\x0a\xb0\x1e\x92\xe9\x0c\x01\xd5\xa7\x36\xd5\x67\x33\xa1\xeb\x75\x9c\x09\x9b\xa5\x84\x4d\xf3\x75\x7a\xa1\xe7\x10\x5b\x90\xca\x58\x87\x50\x7e\xcb\x04\x95\x0c\xa1\x32\xdd\x93\x63\xd1\xc0\x12\x9f\xdf\x46\x99\x91\xdb\xa5\xc8\x6d\xf3\x8d\x3f\x7e\x17\x4e\x45\x67\x4a\x7c\x37\xc6\x6e\xa9\xe7\xae\x39\xfe\xaf\x24\xf2\xd1\xcf\x2f\x30\xa9\x8d\x89\x6c\x1a\x27\xcc\xea\xe6\x5f\x00\x00\x00\xff\xff\x84\x5d\x87\x14\xd7\x04\x00\x00")

func assetsErrorsCsvBytes() ([]byte, error) {
	return bindataRead(
		_assetsErrorsCsv,
		"assets/errors.csv",
	)
}

func assetsErrorsCsv() (*asset, error) {
	bytes, err := assetsErrorsCsvBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/errors.csv", size: 1239, mode: os.FileMode(420), modTime: time.Unix(1510216974, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/errors.csv": assetsErrorsCsv,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"errors.csv": &bintree{assetsErrorsCsv, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

